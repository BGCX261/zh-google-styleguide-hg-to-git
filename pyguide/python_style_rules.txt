Python风格规范
------------------

分号
~~~~~~~~~~~~~~~~~~~~

.. tip::
    不要在行尾加分号, 也不要用分号将两条命令放在同一行.   

.. _line_length:    
    
行长度
~~~~~~~~~~~~~~~~~~~~

.. tip::
    每行不超过80个字符    
   
例外: 如果使用Python 2.4或更早的版本, 导入模块的行可能多于80个字符. 

Python会将圆括号, 中括号和花括号中的行隐式的连接起来, 利用好这一点. 如果需要, 你可以在表达式外围增加一对额外的圆括号. 

.. code-block:: python

    Yes: foo_bar(self, width, height, color='black', design=None, x='foo',
                 emphasis=None, highlight=0)

         if (width == 0 and height == 0 and
             color == 'red' and emphasis == 'strong'):    

如果一个文本字符串在一行放不下, 使用圆括号来实现隐式行连接.

.. code-block:: python

    x = ('This will build a very long long '
         'long long long long long long string')
     
注意上面例子中的元素缩进; 你可以在本文的 :ref:`缩进 <indentation>` 部分找到解释. 
    
圆括号
~~~~~~~~~~~~~~~~~~~~

.. tip::
    保守的使用括号    

除非是用于实现行连接, 否则不要在返回语句或条件语句中使用括号. 不过在元组两边使用圆括号是可以的. 
    
.. code-block:: python    
  
    Yes: if foo:
             bar()
         while x:
             x = bar()
         if x and y:
             bar()
         if not x:
             bar()
         return foo
         for (x, y) in dict.items(): ...  

.. code-block:: python
       
    No:  if (x):
             bar()
         if not(x):
             bar()
         return (foo)

.. _indentation:  
         
缩进
~~~~~~~~~~~~~~~~~~~~

.. tip::
    用4个空格来缩进代码
    
绝对不要用tab, 也不要tab和空格混用. 对于行连接的情况, 你应该要么垂直对齐换行的元素(见 :ref:`行长度 <line_length>` 部分的示例), 或者使用4空格的悬挂缩进(这时第一行不应该有参数)   
         
.. code-block:: python

    Yes:   # Aligned with opening delimiter
           foo = long_function_name(var_one, var_two,
                                    var_three, var_four)

           # 4-space hanging indent; nothing on first line
           foo = long_function_name(
               var_one, var_two, var_three,
               var_four)
           
.. code-block:: python

    No:    # Stuff on first line forbidden
           foo = long_function_name(var_one, var_two,
               var_three, var_four)

           # 2-space hanging indent forbidden
           foo = long_function_name(
             var_one, var_two, var_three,
             var_four)
         
空行
~~~~~~~~~~~~~~~~~~~~

.. tip::
    顶级定义之间空两行, 方法定义之间空一行
    
顶级定义之间空两行, 比如函数或者类定义.  方法定义, 类定义与第一个方法之间, 都应该空一行. 函数或方法中, 某些地方要是你觉得合适, 就空一行.     
      
空格
~~~~~~~~~~~~~~~~~~~~

.. tip::
    按照标准的排版规范来使用标点周围的空格

括号内不要有空格.

.. code-block:: python

    Yes: spam(ham[1], {eggs: 2}, [])

.. code-block:: python

    No:  spam( ham[ 1 ], { eggs: 2 }, [ ] )
    
不要在逗号, 分号, 冒号前面加空格, 但应该在它们后面加(除了在行尾).

.. code-block:: python

    Yes: if x == 4:
             print x, y
         x, y = y, x
     
.. code-block:: python
    
    No:  if x == 4 :
             print x , y
         x , y = y , x

参数列表, 索引或切片的左括号前不应加空格.
         
.. code-block:: python   

    Yes: spam(1)
    
.. code-block:: python
         
    Yes: spam (1)
    
.. code-block:: python  

    Yes: dict['key'] = list[index]
    
.. code-block:: python  

    No:  dict ['key'] = list [index]       

在二元操作符两边都加上一个空格, 比如赋值(=), 比较(==, <, >, !=, <>, <=, >=, in, not in, is, is not), 布尔(and, or, not).  对于算术操作符两边的空格该如何使用, 需要你自己好好判断. 不过两侧务必要保持一致. 

.. code-block:: python

    Yes: x == 1

.. code-block:: python
    
    No:  x<1

当'='用于指示关键字参数或默认参数值时, 不要在其两侧使用空格. 

.. code-block:: python

    Yes: def complex(real, imag=0.0): return magic(r=real, i=imag)
    
.. code-block:: python
    
    No:  def complex(real, imag = 0.0): return magic(r = real, i = imag)
    
不要用空格来垂直对齐多行间的标记, 因为这会成为维护的负担(适用于:, #, =, 等等):

.. code-block:: python

    Yes:
      foo = 1000  # comment
      long_name = 2  # comment that should not be aligned

      dictionary = {
          "foo": 1,
          "long_name": 2,
          }
      
.. code-block:: python

    No:
      foo       = 1000  # comment
      long_name = 2     # comment that should not be aligned

      dictionary = {
          "foo"      : 1,
          "long_name": 2,
          }
          
Python解释器
~~~~~~~~~~~~~~~~~~~~

.. tip::
    每个模块都应该以#!/usr/bin/env python<version>开头

模块应该以一个构造行开始, 以指定执行这个程序用到的Python解释器:

.. code-block:: python

    #!/usr/bin/env python2.4
    
总是使用最特化的版本, 例如, 使用/usr/bin/python2.4, 而不是 /usr/bin/python2. 这样, 当升级到不同的Python版本时, 能轻松找到依赖关系, 同时也避免了使用时的迷惑. 例如, /usr/bin/python2是表示/usr/bin/python2.0.1还是/usr/bin/python2.3.0?
定义:

优点:

缺点:

结论:
    
    
注释
~~~~~~~~~~~~~~~~~~~~

.. tip::
    确保对模块, 函数, 方法和行内注释使用正确的风格    

定义:

优点:

缺点:

结论:
    
    
类
~~~~~~~~~~~~~~~~~~~~

.. tip::
    如果一个类不继承自其他类, 就显式的从object继承. 嵌套类也一样.

定义:

优点:

缺点:

结论:
    
    
字符串
~~~~~~~~~~~~~~~~~~~~

.. tip::
    用%操作符格式化字符串, 即使参数都是字符串. 不过也不能一概而论, 你需要在+和%之间好好判定.

定义:

优点:

缺点:

结论:
    
    
TODO注释
~~~~~~~~~~~~~~~~~~~~

.. tip::
    为临时代码使用TODO注释, 它是一种短期解决方案, 或者说, 不算完美, 但够好了.

定义:

优点:

缺点:

结论:
    
    
导入格式
~~~~~~~~~~~~~~~~~~~~

.. tip::
    每个导入应该独占一行
    
定义:

优点:

缺点:

结论:
    
    
语句
~~~~~~~~~~~~~~~~~~~~

.. tip::
    通常每个语句应该独占一行   

定义:

优点:

缺点:

结论:
    
    
访问控制
~~~~~~~~~~~~~~~~~~~~

.. tip::
    在Python中, 对于琐碎又不太重要的访问函数, 你应该直接使用公有变量来取代它们, 这样可以避免额外的函数调用开销.(译者注: 重视封装的面向对象程序员看到这个可能会很反感, 因为他们一直被教育: 所有成员变量都必须是私有的! 其实, 那真的是有点麻烦啊. 试着去接受Pythonic哲学吧)
    
定义:

优点:

缺点:

结论:
    
    
命名
~~~~~~~~~~~~~~~~~~~~

.. tip::
    module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_VAR_NAME, instance_var_name, function_parameter_name, local_var_name.   

定义:

优点:

缺点:

结论:
    
    
Main
~~~~~~~~~~~~~~~~~~~~

.. tip::
    即使是一个打算被用作脚本的文件也应该是可导入的, 并且简单的导入不应该导致这个脚本的主功能(main functionality)被执行, 这是一种副作用. 主功能应该放在一个main()函数中.   

定义:

优点:

缺点:

结论:
        