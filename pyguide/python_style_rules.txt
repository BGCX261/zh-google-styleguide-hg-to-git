Python风格规范
------------------

分号
~~~~~~~~~~~~~~~~~~~~

.. tip::
    不要在行尾加分号, 也不要用分号将两条命令放在同一行.

定义:

优点:

缺点:

结论:
    
    
行长度
~~~~~~~~~~~~~~~~~~~~

.. tip::
    每行不超过80个字符    

    
定义:

优点:

缺点:

结论:
    
    
括号
~~~~~~~~~~~~~~~~~~~~

.. tip::
    少用括号    

定义:

优点:

缺点:

结论:
    
    
空行
~~~~~~~~~~~~~~~~~~~~

.. tip::
    顶级定义之间空两行, 方法定义之间空一行

定义:

优点:

缺点:

结论:
    
    
空格
~~~~~~~~~~~~~~~~~~~~

.. tip::
    按照标准的排版规范来使用标点周围的空格

定义:

优点:

缺点:

结论:
    
    
Python解释器
~~~~~~~~~~~~~~~~~~~~

.. tip::
    每个模块都应该以#!/usr/bin/env python<version>开头

定义:

优点:

缺点:

结论:
    
    
注释
~~~~~~~~~~~~~~~~~~~~

.. tip::
    确保对模块, 函数, 方法和行内注释使用正确的风格    

定义:

优点:

缺点:

结论:
    
    
类
~~~~~~~~~~~~~~~~~~~~

.. tip::
    如果一个类不继承自其他类, 就显式的从object继承. 嵌套类也一样.

定义:

优点:

缺点:

结论:
    
    
字符串
~~~~~~~~~~~~~~~~~~~~

.. tip::
    用%操作符格式化字符串, 即使参数都是字符串. 不过也不能一概而论, 你需要在+和%之间好好判定.

定义:

优点:

缺点:

结论:
    
    
TODO注释
~~~~~~~~~~~~~~~~~~~~

.. tip::
    为临时代码使用TODO注释, 它是一种短期解决方案, 或者说, 不算完美, 但够好了.

定义:

优点:

缺点:

结论:
    
    
导入格式
~~~~~~~~~~~~~~~~~~~~

.. tip::
    每个导入应该独占一行
    
定义:

优点:

缺点:

结论:
    
    
语句
~~~~~~~~~~~~~~~~~~~~

.. tip::
    通常每个语句应该独占一行   

定义:

优点:

缺点:

结论:
    
    
访问控制
~~~~~~~~~~~~~~~~~~~~

.. tip::
    在Python中, 对于琐碎又不太重要的访问函数, 你应该直接使用公有变量来取代它们, 这样可以避免额外的函数调用开销.(译者注: 重视封装的面向对象程序员看到这个可能会很反感, 因为他们一直被教育: 所有成员变量都必须是私有的! 其实, 那真的是有点麻烦啊. 试着去接受Pythonic哲学吧)
    
定义:

优点:

缺点:

结论:
    
    
命名
~~~~~~~~~~~~~~~~~~~~

.. tip::
    module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_VAR_NAME, instance_var_name, function_parameter_name, local_var_name.   

定义:

优点:

缺点:

结论:
    
    
Main
~~~~~~~~~~~~~~~~~~~~

.. tip::
    即使是一个打算被用作脚本的文件也应该是可导入的, 并且简单的导入不应该导致这个脚本的主功能(main functionality)被执行, 这是一种副作用. 主功能应该放在一个main()函数中.   

定义:

优点:

缺点:

结论:
        